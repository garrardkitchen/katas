'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/','title':"Posts",'content':""});index.add({'id':1,'href':'/posts/react-express-socketio/','title':"React Express Socketio",'content':"react-function-components Requirements:\n  Create a React application and run it to get default page\n  Remove all extant files\n  Create a new App.js starter file\n  Add socket-io to server.js\n  Add socket-io-client to App component\n  Send \u0026lsquo;Welcome!\u0026rsquo; message on client connect\n  Render \u0026lsquo;Welcome!\u0026rsquo; message from the server\n  Tech:\n nodejs npm npx react (create-react-app) socket.io (socker-io) socket.io-client (https://www.npmjs.com/package/socket.io-client)  References\n \rsocket-react  Hint 1\nAdd to App.js:\nimport React, { useState, useEffect } from \u0026#34;react\u0026#34; import socketIOClient from \u0026#34;socket.io-client\u0026#34; const ENDPOINT = \u0026#34;http://127.0.0.1:4001\u0026#34; function App() { const [message, setMessage] = useState(\u0026#34;\u0026#34;) useEffect(() =\u0026gt; { const socket = socketIOClient(ENDPOINT) socket.on(\u0026#34;welcome-evt\u0026#34;, data =\u0026gt; { setMessage(data); }) }, []) return ( \u0026lt;p\u0026gt; {message} \u0026lt;/p\u0026gt; ); } export default App Hint 2\nAdd to server.js:\nconst express = require(\u0026#34;express\u0026#34;) const http = require(\u0026#34;http\u0026#34;) const socketIo = require(\u0026#34;socket.io\u0026#34;) const port = process.env.PORT || 4001 const index = require(\u0026#34;./routes/index\u0026#34;) const app = express() app.use(index) const server = http.createServer(app) const io = socketIo(server) io.on(\u0026#34;connection\u0026#34;, (socket) =\u0026gt; { socket.emit(\u0026#34;welcome-evt\u0026#34;, \u0026#34;Welcome!\u0026#34;) socket.on(\u0026#34;disconnect\u0026#34;, () =\u0026gt; { console.log(\u0026#34;Client disconnected\u0026#34;) }) }) "});index.add({'id':2,'href':'/posts/react-function-components/','title':"React Function Components",'content':"react-function-components Requirements:\n  Create a React application and run it to get default page\n  Remove all extant files\n  Create a new App.js starter file\n  Add a new function component that renders an input field and a button - call this Input\n  Add a new function component that renders a table - call this Table\n  Import and add both new function components as child components to the App\n  On button onClick, push Input input field value prop to Table component\n  Advanced 1:\nAdd bootstrap Material UI theming from -(bootstrap-material-design)[https://fezvrasta.github.io/bootstrap-material-design/]  Tech:\n nodejs npm npx react (create-react-app)  "});index.add({'id':3,'href':'/posts/idempotent-consumer/','title':"Idempotent Consumer",'content':"idempotent consumer Requirements:\n  Create a consumer that accepts different message reference types that each contains one of these properties:\n A message that contains an Id A message that contains a TTL A message that contains a before and after state    The consumer must filter out any duplicate message that contains an Id that has already been processed\n  The consumer must filter out any messages that have expired (TTL)\n  The consumer must filter out messages where the before state does not match the current domain entity state\n  Advanced 1:\n Create a client that sends messages to the service. The above consumer will be used by the service\n  Fire and forget 10000 messages of each type using Artilery.io\n Must not receive 400 or 500 status codes    Advanced 2:\n The consumer must be resilient\n  The consumer must be durable\n  Tech:\n .NET Core c# 3.1 xUnit Moq Docker (Kubernetes is preferable) gRPC for service to service (see 5 above) calls  "});})();