'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/posts/lerna/','title':"Lerna",'content':"Monorepo (all projects are stored in a single repository) is a relatively new concept (to me) and so I\u0026rsquo;ve provided more than usual hits/sample code in the kata. This is primarily to help me cement the core commands.\nThe BACKGROUND to why I\u0026rsquo;ve created this is kata is this. I\u0026rsquo;ve recently needed to create several RabbitMQ consumers through a devised pattern, including additional common functionality. As there is common code, I did not want to violate the DRY principle so set about researching a way to do this, easily, with a nodejs repo. As these consumers, plus additional functionality, are small, I felt it UNNCESSARY to create a layer of complexity that would have come about if I were to have gone down the multiple repository route as well as having a private npm registry for the common code. THANKFULLY I found Lerna and Lerna fits my requirements perfectly.\nRequirements  Create a new lerna project:  $ mkdir lerna-kata \u0026amp;\u0026amp; cd lerna-kata\r$ npm i lerna\r$ lerna init\rCreate a new package called @kata/web:  $ lerna create @kata/web -y\rAdd these sections into packages/web/package.json:  \u0026#34;script\u0026#34; : { \u0026#34;start\u0026#34;: \u0026#34;node lib/web.js\u0026#34; }, \u0026#34;dependencies\u0026#34;: { \u0026#34;express\u0026#34;: \u0026#34;^4.17.1\u0026#34; } Cut \u0026amp; Paste and overwrite in packages/web/lib/web.js:  const common = require(\u0026#39;@kata/common\u0026#39;) const express = require(\u0026#39;express\u0026#39;) const app = express() const router = express.Router() const http = require(\u0026#39;http\u0026#39;).createServer(app) const port = process.env.PORT || 3000 router.get(\u0026#39;/\u0026#39;, async (req, res) =\u0026gt; { res.status(200).send(common.getMessage()) }) app.use(\u0026#39;/\u0026#39;, router) http.listen(port, () =\u0026gt; { console.log(`Connected, listening on port: ${port}`) }) Create a new package called @kata/common:  $ lerna create @kata/common -y\rAdd these sections into packages/common.package.json:  \u0026#34;script\u0026#34; : { \u0026#34;start\u0026#34;: \u0026#34;node lib/common.js\u0026#34; } \u0026#34;dependencies\u0026#34;: { \u0026#34;moment\u0026#34;: \u0026#34;^2.25.2\u0026#34; } Cut \u0026amp; Paste and overwrite in packages/common/lib/common.js  const moment = require(\u0026#39;moment\u0026#39;) const started = moment(Date.now()) const getMessage = () =\u0026gt; { return `Web started ${moment(Date.now()).diff(started, \u0026#34;seconds\u0026#34;)}seconds ago` } module.exports = { getMessage }  Add @kata/common reference to @kata/web\n  Configure root package.json to bootstrap project dependencies\n  Configure root package.json to start all projects\n  Configure root package.json to stream logs\n  Now run\n  Set version in all packages:\n  $ git add .\r$ git commit -m \u0026quot;chore(release): set version\u0026quot;\r$ lerna version --no-push --conventional-commits --no-changelog\rinfo cli using local version of lerna\rlerna notice cli v3.20.2\rlerna info current version 0.0.4\rlerna info Looking for changed packages since v0.0.4\rlerna info getChangelogConfig Successfully resolved preset \u0026quot;conventional-changelog-angular\u0026quot;\rChanges:\r- @kata/common: 0.0.4 =\u0026gt; 0.0.5\r- @kata/web: 0.0.4 =\u0026gt; 0.0.5\r? Are you sure you want to create these versions? Yes\rlerna info execute Skipping git push\rlerna info execute Skipping releases\rlerna success version finished\rAdvanced 1 - scoped project  Start a scoped project\n  Create Dockerfile \u0026amp; run\n  Advanced 2 - import Import existing repository  $ lerna import \u0026lt;local git repository\u0026gt; --dest=src\rsrc above ^^^ must also be listed in the list of packages in the \u0026lt;root\u0026gt;/lerna.json file:\n\u0026#34;packages\u0026#34;: [\u0026#34;packages/*\u0026#34;,\u0026#34;src/*\u0026#34;] Tech  nodejs lerna docker  References  \rlerna \rcommands  Hints Hint 1 - initial setup $ mkdir lerna-kata \u0026amp;\u0026amp; cd lerna-kata\r$ npm i lerna\r$ lerna init\r$ lerna create @kata/web -y\r$ lerna create @kata/common -y\rHint 2 - bootstrap \u0026amp; run To bootstrap all packages OR start, add this to \u0026lt;root\u0026gt;/package.js:\n\u0026#34;scripts\u0026#34;: { \u0026#34;bootstrap\u0026#34;: \u0026#34;lerna clean \u0026amp;\u0026amp; lerna bootstrap\u0026#34;, \u0026#34;start\u0026#34;: \u0026#34;lerna run start --stream\u0026#34; } Hint 3 - add package reference To add a reference from one project to another, run:\n$ lerna add @kata/common --scope @kata/web\rHint 4 - install dependencies To bootstrap all dependencies, run:\n$ cd \u0026lt;root\u0026gt;\r$ npm run bootstrap\rHint 5 - run To run:\n$ cd \u0026lt;root\u0026gt;\r$ npm run start\r$ curl -X GET localhost:3000\rTo access root web page:\nLinux\rrun:\n$ curl -X GET http://localhost:3000\rWeb started 654 seconds ago\rWindows\rrun:\n$ curl http://localhost:3000 -UseBasicParsing\rStatusCode : 200\rStatusDescription : OK\rContent : Web started 483 seconds ago\rRawContent : HTTP/1.1 200 OK\rConnection: keep-alive\rContent-Length: 27\rContent-Type: text/html; charset=utf-8\rETag: W/\u0026quot;1b-499fpsrG7b9xfw5MwAIxMn33THg\u0026quot;\rX-Powered-By: Expres...\rForms :\rHeaders : {[Connection, keep-alive], [Content-Length, 27], [Content-Type, text/html; charset=utf-8], [Date, Mon, 04 May\r2020 14:34:31 GMT]...}\rImages : {}\rInputFields : {}\rLinks : {}\rParsedHtml :\rRawContentLength : 27\r\r"});index.add({'id':1,'href':'/posts/','title':"Posts",'content':""});index.add({'id':2,'href':'/posts/net-core-web-app/','title':".NET Core Web App",'content':"Create a .NET Core C# web application that renders a list of random names api. Load Names from an API, where the URI for API is set in an appSettings file. Use the Configuration IOptions pattern and the HttpClientFactory factory class. Create a test using Moq and xUnit, and return Stub from HttpMessageHandler. Use a different API URI per environment.\nRequirements:\n  Create an .NET Core web app using the dotnet CLI and add to a src folder\n  Create an xunit project using the dotnet CLI and add to the src folder\n  Add the .NET Core web app project reference to the test project\n  Add the Moq nuget package to the test project\n  TBC\n  Tech:\n .NET Core 3.1 xUnit Moq  References\n \rrandom name generator API  Hint 1\ndotnet new webapp -n foo -o baa/src/foo dotnet new xunit -n test -o baa/src/test dotnet add baa/src/test reference baa/src/foo dotnet add baa/src/test package Moq "});index.add({'id':3,'href':'/posts/net-core-web-app-docker/','title':".NET Core and Kubernetes",'content':"Create a Redis Caching layer for above net-core-web-app.NET Core random name web application. Have a TTL of 10 seconds. Host in Docker container. Create an Kubernetes deployment manifest. Refs: deployment example\nRequirements:\n  Complete net-core-web-app\n  Install Kubectl\n  Install Minikube to work with hyper-v driver\n  Set the docker environment to point the MiniKube local Kubernetes cluster\n  TBC\n  Tech:\n .NET Core 3.1 Redis Docker Kubernetes Kubectl MiniKube  References\n \rrandom name generator API  Hint 1\n Use the kubernetes-on-windows post to help install and configure a local Kubernetes cluster  "});index.add({'id':4,'href':'/posts/react-express-socketio/','title':"React Express Socketio",'content':"Requirements:\n  Create a React application and run it to get default page\n  Remove all extant files\n  Create a new App.js starter file\n  Add socket-io to server.js\n  Add socket-io-client to App component\n  Send \u0026lsquo;Welcome!\u0026rsquo; message on client connect\n  Render \u0026lsquo;Welcome!\u0026rsquo; message from the server\n  Tech:\n nodejs npm npx react (create-react-app) socket.io (socker-io) socket.io-client (https://www.npmjs.com/package/socket.io-client)  References\n \rsocket-react  Hint 1\nAdd to App.js:\nimport React, { useState, useEffect } from \u0026#34;react\u0026#34; import socketIOClient from \u0026#34;socket.io-client\u0026#34; const ENDPOINT = \u0026#34;http://127.0.0.1:4001\u0026#34; function App() { const [message, setMessage] = useState(\u0026#34;\u0026#34;) useEffect(() =\u0026gt; { const socket = socketIOClient(ENDPOINT) socket.on(\u0026#34;welcome-evt\u0026#34;, data =\u0026gt; { setMessage(data); }) }, []) return ( \u0026lt;p\u0026gt; {message} \u0026lt;/p\u0026gt; ); } export default App Hint 2\nAdd to server.js:\nconst express = require(\u0026#34;express\u0026#34;) const http = require(\u0026#34;http\u0026#34;) const socketIo = require(\u0026#34;socket.io\u0026#34;) const port = process.env.PORT || 4001 const index = require(\u0026#34;./routes/index\u0026#34;) const app = express() app.use(index) const server = http.createServer(app) const io = socketIo(server) io.on(\u0026#34;connection\u0026#34;, (socket) =\u0026gt; { socket.emit(\u0026#34;welcome-evt\u0026#34;, \u0026#34;Welcome!\u0026#34;) socket.on(\u0026#34;disconnect\u0026#34;, () =\u0026gt; { console.log(\u0026#34;Client disconnected\u0026#34;) }) }) "});index.add({'id':5,'href':'/posts/react-function-components/','title':"React Function Components",'content':"Requirements:\n  Create a React application and run it to get default page\n  Remove all extant files\n  Create a new App.js starter file\n  Add a new function component that renders an input field and a button - call this Input\n  Add a new function component that renders a table - call this Table\n  Import and add both new function components as child components to the App\n  On button onClick, push Input input field value prop to Table component\n  Advanced 1:\nAdd bootstrap Material UI theming from -(bootstrap-material-design)[https://fezvrasta.github.io/bootstrap-material-design/]  Tech:\n nodejs npm npx react (create-react-app)  "});index.add({'id':6,'href':'/posts/idempotent-consumer/','title':"Idempotent Consumer",'content':"Requirements:\n  Create a consumer that accepts different message reference types that each contains one of these properties:\n A message that contains an Id A message that contains a TTL A message that contains a before and after state    The consumer must filter out any duplicate message that contains an Id that has already been processed\n  The consumer must filter out any messages that have expired (TTL)\n  The consumer must filter out messages where the before state does not match the current domain entity state\n  Advanced 1:\n Create a client that sends messages to the service. The above consumer will be used by the service\n  Fire and forget 10000 messages of each type using Artilery.io\n Must not receive 400 or 500 status codes    Advanced 2:\n The consumer must be resilient\n  The consumer must be durable\n  Tech:\n .NET Core c# 3.1 xUnit Moq Docker (Kubernetes is preferable) gRPC for service to service (see 5 above) calls  "});})();