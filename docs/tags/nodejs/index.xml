<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nodejs on Katas</title>
    <link>https://katas.garrardkitchen.com/tags/nodejs/</link>
    <description>Recent content in nodejs on Katas</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 15 May 2020 17:27:26 +0100</lastBuildDate>
    
	<atom:link href="https://katas.garrardkitchen.com/tags/nodejs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Typescript and Jest</title>
      <link>https://katas.garrardkitchen.com/posts/ts-jest/</link>
      <pubDate>Fri, 15 May 2020 17:27:26 +0100</pubDate>
      
      <guid>https://katas.garrardkitchen.com/posts/ts-jest/</guid>
      <description>A short kata to configure a nodejs project, using TypeScript instead of javascript, and to create a unit test using the Jest testing framework.
Requirements  Create a new nodejs project and install dependencies:  $ npm init -y $ npm i -D typescript nodemon \  jest \  babel-jest \  @types/jest \  @babel/preset-typescript \  @babel/preset-env \  @babel/core Initialise jest  $ jest --init The following questions will help Jest to create a suitable configuration for your project âˆš Would you like to use Jest when running &amp;#34;test&amp;#34; script in &amp;#34;package.</description>
    </item>
    
    <item>
      <title>Lerna</title>
      <link>https://katas.garrardkitchen.com/posts/lerna/</link>
      <pubDate>Mon, 04 May 2020 14:33:12 +0100</pubDate>
      
      <guid>https://katas.garrardkitchen.com/posts/lerna/</guid>
      <description>Monorepo (all projects are stored in a single repository) is a relatively new concept (to me) and so I&amp;rsquo;ve provided more than usual hits/sample code in the kata. This is primarily to help me cement the core commands.
The BACKGROUND to why I&amp;rsquo;ve created this is kata is this. I&amp;rsquo;ve recently needed to create several RabbitMQ consumers through a devised pattern, including additional common functionality. As there is common code, I did not want to violate the DRY principle so set about researching a way to do this, easily, with a nodejs repo.</description>
    </item>
    
    <item>
      <title>React Express Socketio</title>
      <link>https://katas.garrardkitchen.com/posts/react-express-socketio/</link>
      <pubDate>Mon, 27 Apr 2020 15:08:17 +0100</pubDate>
      
      <guid>https://katas.garrardkitchen.com/posts/react-express-socketio/</guid>
      <description>Requirements:
  Create a React application and run it to get default page
  Remove all extant files
  Create a new App.js starter file
  Add socket-io to server.js
  Add socket-io-client to App component
  Send &amp;lsquo;Welcome!&amp;rsquo; message on client connect
  Render &amp;lsquo;Welcome!&amp;rsquo; message from the server
  Tech:
 nodejs npm npx react (create-react-app) socket.io (socker-io) socket.io-client (https://www.npmjs.com/package/socket.io-client)  References</description>
    </item>
    
    <item>
      <title>React Function Components</title>
      <link>https://katas.garrardkitchen.com/posts/react-function-components/</link>
      <pubDate>Mon, 27 Apr 2020 15:08:04 +0100</pubDate>
      
      <guid>https://katas.garrardkitchen.com/posts/react-function-components/</guid>
      <description>Requirements:
  Create a React application and run it to get default page
  Remove all extant files
  Create a new App.js starter file
  Add a new function component that renders an input field and a button - call this Input
  Add a new function component that renders a table - call this Table
  Import and add both new function components as child components to the App</description>
    </item>
    
  </channel>
</rss>